#! /usr/bin/env python3
# -*- coding: utf-8 -*-

###########################################################################
# Lock the screen.
#
# Copyright (C) 2010 Fotis Tsamis <ftsamis@gmail.com>
# 2018, Alkis Georgopoulos <alkisg@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# On Debian GNU/Linux systems, the complete text of the GNU General
# Public License can be found in `/usr/share/common-licenses/GPL".
###########################################################################

import gi
import sys
import time
gi.require_version('Gdk', '3.0')
gi.require_version('Gtk', '3.0')
from gi.repository import Gdk
from gi.repository import GdkPixbuf
from gi.repository import GObject
from gi.repository import Gtk
from gi.repository import Pango


class LockScreen:
    def lock(self, msg="The screen is locked by a system administrator."):
        backlock = Gtk.Window(Gtk.WindowType.POPUP)
        backlock.resize(1, 1)
        backlock.modify_bg(Gtk.StateType.NORMAL, Gdk.Color(0, 0, 0))
        frontview = Gtk.Window()
        frontview.modify_bg(Gtk.StateType.NORMAL, Gdk.Color(0, 0, 0))
        screen = Gdk.Screen.get_default()
        swidth = screen.get_width()
        sheight = screen.get_height()
        smin = min(swidth, sheight)
        frontview.resize(swidth, sheight)

        vbox = Gtk.VBox(spacing=75)

        imagepb = GdkPixbuf.Pixbuf.new_from_file_at_size('lock.svg', smin/3, smin/3)
        image = Gtk.Image()
        image.set_from_pixbuf(imagepb)
        vbox.pack_start(image, True, True, 0)

        self.label = Gtk.Label()
        self.label.set_markup('<span size="' + str(10*swidth) + '"> ' + msg + ' </span>')
        self.fade(True)
        vbox.pack_start(self.label, True, True, 0)

        align = Gtk.Alignment.new(0.5, 0.5, 0, 0)
        align.add(vbox)
        frontview.add(align)

        backlock.show_all()
        frontview.show_all()

        frontview.set_keep_above(True)
        frontview.fullscreen()
        Gdk.beep()
        Gdk.keyboard_grab(backlock.get_window(), False, 0)

        # To automatically unlock the screen after 7 seconds, uncomment this:
        #GObject.timeout_add(7000, self.unlock)

    def fade(self, firsttime=False):
        if firsttime:
            self.fadesecs = 3.0
            self.fadestart = time.time()
            # For debugging:
            #print(self.fadestart, self.fadesecs)

        percentage = (time.time() - self.fadestart) / self.fadesecs
        i = min(round(Gdk.Color.MAX_VALUE * percentage), Gdk.Color.MAX_VALUE)
        # For debugging:
        #print(time.time(), '-', 100 * percentage, "completed, rendering color ", i)
        self.label.modify_fg(Gtk.StateType.NORMAL, Gdk.Color(i, i, i))
        # Put a sleep() here if you want to test for slow thin clients:
        #time.sleep(0.6)
        if i < Gdk.Color.MAX_VALUE:
            GObject.timeout_add(60, self.fade)

        return False

    def unlock(self):
        Gdk.keyboard_ungrab(0)
        exit()


if len(sys.argv) <= 1:
    LockScreen().lock()
else:
    LockScreen().lock(sys.argv[1])
Gtk.main()
